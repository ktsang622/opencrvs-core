# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
# OpenCRVS is also distributed under the terms of the Civil Registration
# & Healthcare Disclaimer located at http://opencrvs.org/license.
#
# Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
type EventSearchResultSet {
  results: [EventSearchSet]
  totalItems: Int
}

type AssignmentData {
  practitionerId: String
  firstName: String
  lastName: String
  officeName: String
  avatarURL: String!
}

interface EventSearchSet {
  id: ID!
  type: String
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type RegistrationSearchSet {
  status: String
  contactNumber: String
  contactEmail: String
  contactRelationship: String
  dateOfDeclaration: Date
  trackingId: String
  registrationNumber: String
  eventLocationId: String
  registeredLocationId: String
  reason: String
  comment: String
  duplicates: [ID]
  createdAt: String
  modifiedAt: String
  assignment: AssignmentData
}

type OperationHistorySearchSet {
  operationType: String
  operatedOn: Date
  operatorRole: String
  operatorName: [HumanName]
  operatorOfficeName: String
  operatorOfficeAlias: [String]
  notificationFacilityName: String
  notificationFacilityAlias: [String]
  rejectReason: String
  rejectComment: String
}

type BirthEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  childName: [HumanName]
  childIdentifier: String
  dateOfBirth: PlainDate
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
  placeOfBirth: String
  childGender: String
  mothersFirstName: String
  mothersLastName: String
  fathersFirstName: String
  fathersLastName: String
  motherDateOfBirth: String
  fatherDateOfBirth: String
  motherIdentifier: String
  fatherIdentifier: String
}

type DeathEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  deceasedGender: String
  deceasedName: [HumanName]
  dateOfDeath: PlainDate
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type MarriageEventSearchSet implements EventSearchSet {
  id: ID!
  type: String
  brideName: [HumanName]
  groomName: [HumanName]
  brideIdentifier: String
  groomIdentifier: String
  dateOfMarriage: PlainDate
  registration: RegistrationSearchSet
  operationHistories: [OperationHistorySearchSet]
}

type EventProgressResultSet {
  results: [EventProgressSet]
  totalItems: Int
}

type EventProgressData {
  timeInProgress: Int
  timeInReadyForReview: Int
  timeInRequiresUpdates: Int
  timeInWaitingForApproval: Int
  timeInWaitingForBRIS: Int
  timeInReadyToPrint: Int
}

type EventProgressSet {
  id: ID!
  type: String
  name: [HumanName]
  dateOfEvent: PlainDate
  registration: RegistrationSearchSet
  startedBy: User
  startedByFacility: String
  startedAt: Date
  progressReport: EventProgressData
}

input SortBy {
  column: String!
  order: String!
}

type Query {
  searchEvents(
    userId: String
    advancedSearchParameters: AdvancedSearchParametersInput!
    count: Int
    skip: Int
    sort: String
    sortColumn: String
    sortBy: [SortBy!]
  ): EventSearchResultSet
  getEventsWithProgress(
    declarationJurisdictionId: String
    registrationStatuses: [String]
    compositionType: [String]
    count: Int
    skip: Int
    sort: String
  ): EventProgressResultSet
}
